<div class="sample-product-wrapper custom-dots-style" data-max-products="{{ settings.max_products }}" data-threshold="{{ settings.amount | times: 100 }}">
  {% if settings.heading != blank or settings.text != blank %}
    <div class="top-heading">
      {% if settings.heading != blank %}
        <h2>{{ settings.heading }}</h2>
      {% endif %}
      {% if settings.text != blank %}
        <h4>{{ settings.text }}</h4>
      {% endif %}
    </div>
  {% endif %}

  <div class="sample-product-row simple-product">
    {% for Sproduct in settings.sample_products %}
      <div class="sample-product">
        <div class="f-image">
          <img src="{{ Sproduct.featured_image | img_url:'300x' }}">
        </div>
        <div class="grid-product__info">
          <div class="grid-product__title grid-product__title--body">{{ Sproduct.title }}</div>
          {% assign current_variant = Sproduct.selected_or_first_available_variant %}
          <button type="button" {% unless current_variant.available %}disabled="disabled"{% endunless %} class="btn btn--full add-to-cart-btn" data-variant-id="{{current_variant.id}}">
            {% if current_variant.available %}
              {{ 'products.product.add_to_cart' | t }}
            {% else %}
              {{ 'products.product.sold_out' | t }}
            {% endif %}
          </button>
        </div>
      </div>
    {% endfor %}
  </div>

  {% assign maxProducts = settings.max_products %}
  <p class="max-samples-message" style="display:none;">{{ settings.max_product_message | replace: '[number]', maxProducts }}</p>
  <div class="sample-checkout-wrap">
    <button type="button" class="btn btn--full popup-checkout-btn">Checkout</button>
    <button data-fancybox-close class="sample-popup-close">No Thanks</button>
  </div>
</div>

<script>
  var selectedProducts = [];
  var maxProducts = document.querySelector('.sample-product-wrapper').getAttribute('data-max-products');
  var threshold = document.querySelector('.sample-product-wrapper').getAttribute('data-threshold');
  var premiumSlider, simpleSlider; // Define the Flickity variables for both sliders

  function toggleProduct(variantId, button) {
    if (selectedProducts.includes(variantId)) {
      selectedProducts = selectedProducts.filter(id => id !== variantId);
      button.textContent = '{{ "products.product.add_to_cart" | t }}';
      button.classList.remove('remove-btn');
    } else {
      if (selectedProducts.length < maxProducts) {
        selectedProducts.push(variantId);
        button.textContent = 'Remove';
        button.classList.add('remove-btn');
      } else {
        alert('You can only add up to ' + maxProducts + ' products.');
      }
    }
    document.querySelector('.max-samples-message').style.display = selectedProducts.length == maxProducts ? 'block' : 'none';
    toggleCheckoutButton();
  }

  function toggleCheckoutButton() {
    var checkoutButton = document.querySelector('.popup-checkout-btn');
    if (selectedProducts.length === 0) {
      checkoutButton.classList.add('disabled');
      checkoutButton.setAttribute('disabled', 'disabled');
    } else {
      checkoutButton.classList.remove('disabled');
      checkoutButton.removeAttribute('disabled');
    }
  }




  document.querySelectorAll('.add-to-cart-btn').forEach(button => {
    button.addEventListener('click', () => {
      var variantId = button.getAttribute('data-variant-id');
      toggleProduct(variantId, button);
    });
  });

  document.querySelector('.popup-checkout-btn').addEventListener('click', () => {
    console.log('Checkout button clicked'); // Debugging information
    if (selectedProducts.length === 0) {
      alert('No products selected for checkout.');
      return;
    }

    function addProductToCart(index) {
      if (index >= selectedProducts.length) {
        console.log('All products added to cart');
        window.location.href = '/checkout'; // Redirect to checkout page
        return;
      }

      var variantId = selectedProducts[index];
      console.log('Adding product with variant ID: ' + variantId); // Debugging information
      var ajax = {
        type: "POST",
        url: "/cart/add.js",
        data: "quantity=1&id=" + variantId,
        dataType: "json",
        success: function (n) {
          console.log('Product added to cart: ' + variantId); // Debugging information
          addProductToCart(index + 1); // Add next product
        },
        error: function (n, c) {
          console.log('Failed to add product to cart: ' + variantId); // Debugging information
          addProductToCart(index + 1); // Try to add next product even if this one fails
        }
      };
      jQuery.ajax(ajax);
    }

    addProductToCart(0); // Start adding products from the first one
  });

  document.addEventListener('DOMContentLoaded', function() {
    initializeSampleProductDisplay();


    simpleSlider = new Flickity('.simple-product', {
      cellAlign: 'left',
      contain: true,
      prevNextButtons: true,
      pageDots: true,
      freeScroll: false,
      avoidReflow: true,
      wrapAround: true,
    });

    // Event listener for cart updates (replace with your actual event listener logic)
    document.addEventListener('cart:updated', function(event) {
      const updatedCartData = event.detail.cart;
      updateSampleProductDisplay(updatedCartData.total_price);

      // Store updated cart total in sessionStorage
      sessionStorage.setItem('cartTotal', updatedCartData.total_price.toString());
    });

    // Attach click event handler to button
    document.querySelector('.sample-product-btn').addEventListener('click', function() {
      // Use setTimeout to delay the resize by 2 seconds (2000 milliseconds)
      setTimeout(function() {
        if (simpleSlider) simpleSlider.resize(); // Resize simple Flickity slider
      }, 500);
    });

    // Initial toggle of checkout button state
    toggleCheckoutButton();
  });
</script>



<style>
  .remove-btn {
      background-color: #b30000;
  }
  
  .remove-btn:hover, .remove-btn:focus {
      background-color: #ff0000;
  }
  p.max-samples-message {
    text-align: center;
    margin: 15px 0;
    color: #b30000;
  }
  
  .sample-product-row {
      min-height: 420px;
      padding-bottom: 15px;
  }
  
  .sample-product-row ol.flickity-page-dots {
      position: relative;
      bottom: 0;
  }
  .sample-checkout-wrap {
    max-width: 280px;
    margin: 0 auto;
    text-align: center;
  }
  
  .sample-checkout-wrap .sample-popup-close {
      display: inline-block;
      padding-top: 10px;
      text-decoration: underline;
      text-underline-offset: 5px;
      color: #737373;
  }
  
  .sample-checkout-wrap .sample-popup-close:hover {
      color: #000;
  }
  button.sample-product-btn {
        margin: 0 0 10px 0;
    display: inline-block;
    animation: flash 2.5s infinite;
    color: #b30000;
    text-transform: uppercase;
    font-weight: 700;
    text-decoration: underline;
    text-underline-offset: 5px;
    font-size: 14px;
  }
  
  .cart__checkout-wrapper {
      text-align: center;
      margin-top: 10px;
  }
  @keyframes flash {
      0% {
          opacity: 1;
      }
      50% {
          opacity: 0.5;
      }
      100% {
          opacity: 1;
      }
  }
</style>
