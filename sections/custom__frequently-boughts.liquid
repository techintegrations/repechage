{% style %}
  #shopify-section-{{section.id}} {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
      background-color: {{section.settings.bg_color}};
  }

  @media screen and (max-width:768px){
    #shopify-section-{{section.id}} {
      padding-top: {{ section.settings.padding_top_m }}px;
      padding-bottom: {{ section.settings.padding_bottom_m }}px;
    }
  }
{% endstyle %}

<div class="mian-wrapper-frequently_boughts page-width">
  {% if section.settings.top_heading != blank %}
    <h2 class="top-heading">
      {{ section.settings.top_heading }}
    </h2>
  {% endif %}

  <div class="main-frequently_boughts">
    <div class="main-products-wrapper">
      <div class="main-product f-product-row" data-product-variant-id="{{ product.variants.first.id }}">
        <div class="product-img image-wrap">
          <a href="{{ product.url }}">
            <img src="{{ product.featured_image | product_img_url: 'master' }}">
          </a>
        </div>
        <div class="product-info info-wrap">
          <p class="tag">This Product</p>
          <h3 class="title">
            <a href="{{ product.url }}">
              {{- product.title }}
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
                aria-hidden="true"
                width="20"
                height="20"
                class="-rotate-90 absolute right-[-24px] lg:right-0 top-[50%] translate-y-[-50%]"
                data-astro-cid-urh7ycih=""
              >
                <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
              </svg>
            </a>
          </h3>
          <p class="price">{{ product.price | money }}</p>
          {% if product.variants.size > 1 %}
            <div class="variant-selector">
              <select class="variant-dropdown">
                {% for variant in product.variants %}
                  <option
                    value="{{ variant.id }}"
                    {% if variant == product.variants.first %}
                      selected
                    {% endif %}
                  >
                    {{ variant.title }} - {{ variant.price | money }}
                  </option>
                {% endfor %}
              </select>
            </div>
          {% endif %}
        </div>
      </div>

      {% for suggested_product in section.settings.product_list %}
        <div class="suggested-product f-product-row" data-product-variant-id="{{ suggested_product.variants.first.id }}">
          <div class="devider">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke-width="2"
              stroke="currentColor"
              class="w-[20px] h-[20px]"
              height="20"
              width="20"
              aria-hidden="true"
            >
              <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15"></path>
            </svg>
          </div>
          <div class="suggested-product_image image-wrap">
            <a href="{{ suggested_product.url }}">
              <img src="{{ suggested_product.featured_image | product_img_url:'master' }}">
            </a>
          </div>
          <div class="suggested-product-info info-wrap">
            <p class="tag">Suggested Product</p>
            <h3 class="title">
              <a href="{{ suggested_product.url }}">
                {{- suggested_product.title }}
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                  aria-hidden="true"
                  width="20"
                  height="20"
                  class="-rotate-90 absolute right-[-24px] lg:right-0 top-[50%] translate-y-[-50%]"
                  data-astro-cid-urh7ycih=""
                >
                  <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd"></path>
                </svg>
              </a>
            </h3>
            <p class="price">{{ suggested_product.price | money }}</p>
            {% if suggested_product.variants.size > 1 %}
              <div class="variant-selector">
                <select class="variant-dropdown">
                  {% for variant in suggested_product.variants %}
                    <option
                      value="{{ variant.id }}"
                      {% if variant == suggested_product.variants.first %}
                        selected
                      {% endif %}
                    >
                      {{ variant.title }} - {{ variant.price | money }}
                    </option>
                  {% endfor %}
                </select>
              </div>
            {% endif %}
          </div>
        </div>
      {% endfor %}
    </div>

    <div class="frequently_boughts-info">
      <div class="info-wrapper">
        <p class="price">
          <span>Total Price:</span> <span id="total-price">{{ product.price | money }}</span>
        </p>
        <button class="add-to-cart-F-B btn" type="submit">Add to cart</button>
      </div>
    </div>
  </div>
</div>
<script>
// Function to update prices dynamically when variant changes
function updateProductVariants() {
    let totalPrice = 0;

    // Handle main product
    const mainProductEl = document.querySelector('.main-product');
    const mainProductDropdown = mainProductEl.querySelector('.variant-dropdown');
    const mainProductPriceEl = mainProductEl.querySelector('.price');

    if (mainProductDropdown) {
        const selectedOption = mainProductDropdown.options[mainProductDropdown.selectedIndex];
        const selectedVariantPrice = selectedOption.textContent.match(/\$[0-9.,]+/)[0]; // Fetch price from dropdown option
        mainProductPriceEl.textContent = selectedVariantPrice; // Update the product's price element
        totalPrice += parseFloat(selectedVariantPrice.replace('$', '').trim()); // Add to total price
    } else {
        const mainProductPrice = parseFloat(mainProductPriceEl.textContent.replace('$', '').trim());
        totalPrice += mainProductPrice; // Use current price if no variant dropdown
    }

    // Handle suggested products
    document.querySelectorAll('.suggested-product').forEach(productEl => {
        const productDropdown = productEl.querySelector('.variant-dropdown');
        const productPriceEl = productEl.querySelector('.suggested-product-info .price');

        if (productDropdown) {
            const selectedOption = productDropdown.options[productDropdown.selectedIndex];
            const selectedVariantPrice = selectedOption.textContent.match(/\$[0-9.,]+/)[0]; // Fetch price from dropdown option
            productPriceEl.textContent = selectedVariantPrice; // Update the product's price element
            totalPrice += parseFloat(selectedVariantPrice.replace('$', '').trim()); // Add to total price
        } else {
            const productPrice = parseFloat(productPriceEl.textContent.replace('$', '').trim());
            totalPrice += productPrice; // Use current price if no variant dropdown
        }
    });

    // Update the total price display in the info-wrapper
    document.getElementById('total-price').textContent = '$' + totalPrice.toFixed(2);
}

// Initial update when the page loads
updateProductVariants();

// Update price on variant change for both main and suggested products
document.querySelectorAll('.variant-dropdown').forEach(dropdown => {
    dropdown.addEventListener('change', updateProductVariants);
});

// Add to cart functionality
async function addProductsToCart() {
    let productVariantIds = [];

    // Handle main product
    const mainProductEl = document.querySelector('.main-product');
    const mainProductVariantId = mainProductEl.querySelector('.variant-dropdown')?.value || mainProductEl.getAttribute('data-product-variant-id');
    productVariantIds.push(mainProductVariantId);

    // Handle suggested products
    document.querySelectorAll('.suggested-product').forEach(productEl => {
        const suggestedProductVariantId = productEl.querySelector('.variant-dropdown')?.value || productEl.getAttribute('data-product-variant-id');
        productVariantIds.push(suggestedProductVariantId);
    });

    // Add each product to the cart using Shopify's AJAX API
    for (const variantId of productVariantIds) {
        try {
            await fetch('/cart/add.js', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ id: variantId, quantity: 1 })
            });
        } catch (error) {
            console.error("Error adding product to cart:", error);
        }
    }
}

document.querySelector('.add-to-cart-F-B').addEventListener('click', async () => {
    await addProductsToCart();
    // Update cart drawer if your theme uses it
    theme.cart.getCartProductMarkup().then(cartMarkup => {
        const cartForm = new theme.CartForm(document.getElementById('CartDrawerForm'));
        cartForm.cartMarkup(cartMarkup);
    });
    document.dispatchEvent(new CustomEvent('cart:open')); // Open the cart drawer
});

</script>
{% schema %}
{
  "name": "Frequently Boughts",
  "class": "frequently-boughts-section",
  "settings": [
    {
      "type": "text",
      "id": "top_heading",
      "label": "Heading"
    },
    {
      "type": "product_list",
      "id": "product_list",
      "label": "Suggested Product",
      "limit": 10
    },
    {
      "type": "header",
      "content": "Spacing Desktop"
    },
    {
      "type": "number",
      "id": "padding_top",
      "label": "Top spacing",
      "default": 0
    },
    {
      "type": "number",
      "id": "padding_bottom",
      "label": "Bottom spacing",
      "default": 0
    },
    {
      "type": "header",
      "content": "Spacing Mobile"
    },
    {
      "type": "number",
      "id": "padding_top_m",
      "label": "Top spacing",
      "default": 0
    },
    {
      "type": "number",
      "id": "padding_bottom_m",
      "label": "Bottom spacing",
      "default": 0
    }
  ],
  "presets": [
    {
      "name": "Frequently Boughts"
    }
  ]
}
{% endschema %}
