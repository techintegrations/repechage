<div class="mian-F-B-wrapper page-width">
  <div class="main-F-B-heading">{{ section.settings['main-F-B-headings'] }}</div>
  <div class="main-F-B">
    <div class="products-wrapper-F-B">
      <div class="main-product" data-product-variant-id="{{ product.variants.first.id }}">
        <div class="product-img-F-B">
          <img src="{{ product.featured_image | product_img_url: 'master' }}">
        </div>
        <div class="main-product-info">
          <p class="Product-tag">This Product</p>
          <h3 class="product-heading">{{ product.title }}</h3>
          <p class="main-product-price">{{ product.price | money }}</p>
        </div>
      </div>

      {% for suggested_product in section.settings['suggested-product'] %}
        {% if suggested_product != blank %}
          <div class="devider-F-b">
            <div
              class="rounded-full "
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke-width="2"
                stroke="currentColor"
                class="w-[20px] h-[20px]"
                height="20"
                width="20"
                aria-hidden="true"
              >
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15"></path>
              </svg>
            </div>
          </div>
          <div class="suggested-product" data-product-variant-id="{{ suggested_product.variants.first.id }}">
            <div class="product-img-F-B">
              <img src="{{ suggested_product.featured_image | product_img_url:'master' }}">
            </div>
            <div class="suggested-product-info">
              <p class="Product-tag">Suggested Product</p>
              <h3 class="product-heading">{{ suggested_product.title }}</h3>
              <p class="suggested-product-price">{{ suggested_product.price | money }}</p>
            </div>
          </div>
        {% endif %}
      {% endfor %}
    </div>

    <div class="F-B-info">
      <div class="F-B-info-wrapper">
        <p>
          <span>Total Price:</span> <span id="total-price">{{ product.price | money }}</span>
        </p>
        <button class ="add-to-cart-F-B"  >Add to cart</button>

      </div>
    </div>
  </div>
</div>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>
  $(document).ready(function() {
    const mainProductVariantId = $('.main-product').data('product-variant-id');
    let productVariantIds = [mainProductVariantId];
    let totalPrice = parseFloat($('.main-product-price').text().replace('$', '').trim());

    // Collect suggested product variant IDs and calculate total price
    $('.suggested-product').each(function() {
      const suggestedProductPrice = parseFloat($(this).find('.suggested-product-price').text().replace('$', '').trim());
      const suggestedProductVariantId = $(this).data('product-variant-id');
      totalPrice += suggestedProductPrice;
      productVariantIds.push(suggestedProductVariantId);
    });

    $('#total-price').text('$' + totalPrice.toFixed(2));

    function addProductsToCart(productVariantIds) {
      const promises = productVariantIds.map(variantId =>
        $.ajax({
          type: 'POST',
          url: '/cart/add.js',
          contentType: 'application/json',
          data: JSON.stringify({ id: variantId, quantity: 1 })
        })
      );

      return $.when(...promises); // Wait for all promises to resolve
    }

    function updateCart() {
      return $.getJSON('/cart.js')
        .done(function(cartData) {
          console.log('Cart data fetched:', cartData); // Debugging log
          yourInstance.cartMarkup(cartData);
        })
        .fail(function() {
          console.error('Failed to fetch cart data');
        });
    }

    const yourInstance = {
      buildCart: function() {
        theme.cart.getCartProductMarkup().then(this.cartMarkup.bind(this));
      },
      cartMarkup: function(cartData) {
        const cartContainer = $('.cart-container'); // Adjust to your actual cart container selector
        cartContainer.empty(); // Clear existing items

        $.each(cartData.items, function(index, item) {
          const itemHtml = `<div class="cart-item">${item.product.title} - ${theme.Currency.formatMoney(item.price, theme.settings.moneyFormat)}</div>`;
          cartContainer.append(itemHtml); // Append new item
        });

        // Update total price
        $('#total-price').text(theme.Currency.formatMoney(cartData.total_price, theme.settings.moneyFormat));
      },
    };

    $('.add-to-cart-F-B').on('click', async function(event) {
      const button = $(this);
      button.prop('disabled', true).text('Adding...'); // Disable the button

      try {
        await addProductsToCart(productVariantIds);
        await updateCart(); // Ensure the cart is updated with new items
        $(document).trigger('cart:open');
      } catch (error) {
        console.error('Error adding products to cart:', error);
      } finally {
        button.prop('disabled', false).text('Add to cart'); // Reset button text
      }
    });
  });
</script>


{% schema %}
{
  "name": "frequently-boughts",
  "settings": [
    {
      "type": "richtext",
      "id": "main-F-B-headings",
      "label": "Heading"
    },
    {
      "type": "product_list",
      "id": "suggested-product",
      "label": "Suggested Product",
      "limit": 10
    }
  ],
  "presets": [
    {
      "name": "Frequently Boughts"
    }
  ]
}
{% endschema %}
