<div class="mian-F-B-wrapper page-width">
  <div class="main-F-B-heading">{{ section.settings['main-F-B-headings'] }}</div>
  <div class="main-F-B">
    <div class="products-wrapper-F-B">
      <div class="main-product" data-product-variant-id="{{ product.variants.first.id }}">
        <div class="product-img-F-B">
          <img src="{{ product.featured_image | product_img_url: 'master' }}">
        </div>
        <div class="main-product-info">
          <p class="Product-tag">This Product</p>
          <h3 class="product-heading">{{ product.title }}</h3>
          <p class="main-product-price">{{ product.price | money }}</p>
        </div>
      </div>

      {% for suggested_product in section.settings['suggested-product'] %}
        {% if suggested_product != blank %}
          <div class="devider-F-b">
            <div
              class="rounded-full "
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke-width="2"
                stroke="currentColor"
                class="w-[20px] h-[20px]"
                height="20"
                width="20"
                aria-hidden="true"
              >
                <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15"></path>
              </svg>
            </div>
          </div>
          <div class="suggested-product" data-product-variant-id="{{ suggested_product.variants.first.id }}">
            <div class="product-img-F-B">
              <img src="{{ suggested_product.featured_image | product_img_url:'master' }}">
            </div>
            <div class="suggested-product-info">
              <p class="Product-tag">Suggested Product</p>
              <h3 class="product-heading">{{ suggested_product.title }}</h3>
              <p class="suggested-product-price">{{ suggested_product.price | money }}</p>
            </div>
          </div>
        {% endif %}
      {% endfor %}
    </div>

    <div class="F-B-info">
      <div class="F-B-info-wrapper">
        <p>
          <span>Total Price:</span> <span id="total-price">{{ product.price | money }}</span>
        </p>
        <button class ="add-to-cart-F-B"  >Add to cart</button>

      </div>
    </div>
  </div>
</div>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    const mainProductVariantId = document.querySelector('.main-product').getAttribute('data-product-variant-id');
    let productVariantIds = [mainProductVariantId];
    let totalPrice = parseFloat(document.querySelector('.main-product-price').textContent.replace('$', '').trim());

    // Collect suggested product variant IDs and calculate total price
    document.querySelectorAll('.suggested-product').forEach(productEl => {
      const suggestedProductPrice = parseFloat(productEl.querySelector('.suggested-product-price').textContent.replace('$', '').trim());
      const suggestedProductVariantId = productEl.getAttribute('data-product-variant-id');
      totalPrice += suggestedProductPrice;
      productVariantIds.push(suggestedProductVariantId);
    });

    document.getElementById('total-price').textContent = '$' + totalPrice.toFixed(2);

    async function addProductsToCart(productVariantIds) {
      const requests = productVariantIds.map(variantId =>
        fetch('/cart/add.js', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ id: variantId, quantity: 1 })
        })
      );

      try {
        await Promise.all(requests);
        console.log('Products added to cart successfully.');
      } catch (error) {
        console.error('Error adding products to cart:', error);
      }
    }

    async function updateCart() {
      try {
        const response = await fetch('/cart.js');
        if (!response.ok) throw new Error('Network response was not ok');
        
        const cartData = await response.json();
        console.log('Cart data fetched:', cartData); // Debugging log
        yourInstance.cartMarkup(cartData); // Update cart display with the latest data
      } catch (error) {
        console.error('Failed to fetch cart data:', error);
      }
    }

    const yourInstance = {
      buildCart: function() {
        theme.cart.getCartProductMarkup().then(this.cartMarkup.bind(this));
      },
      cartMarkup: function(cartData) {
        const cartContainer = document.querySelector('.cart-container'); // Adjust to your actual cart container selector
        cartContainer.innerHTML = ''; // Clear existing items

        cartData.items.forEach(item => {
          const itemHtml = `<div class="cart-item">${item.product.title} - ${theme.Currency.formatMoney(item.price, theme.settings.moneyFormat)}</div>`;
          cartContainer.innerHTML += itemHtml; // Append new item
        });

        // Update total price
        document.getElementById('total-price').textContent = theme.Currency.formatMoney(cartData.total_price, theme.settings.moneyFormat);
      },
    };

    document.querySelector('.add-to-cart-F-B').addEventListener('click', async (event) => {
      const button = event.currentTarget;
      button.disabled = true; // Disable the button
      button.textContent = 'Adding...'; // Change button text

      await addProductsToCart(productVariantIds);
      await updateCart(); // Ensure the cart is updated with new items

      document.dispatchEvent(new CustomEvent('cart:open'));

      button.disabled = false; // Re-enable the button
      button.textContent = 'Add to cart'; // Reset button text
    });
  });
</script>




{% schema %}
{
  "name": "frequently-boughts",
  "settings": [
    {
      "type": "richtext",
      "id": "main-F-B-headings",
      "label": "Heading"
    },
    {
      "type": "product_list",
      "id": "suggested-product",
      "label": "Suggested Product",
      "limit": 10
    }
  ],
  "presets": [
    {
      "name": "Frequently Boughts"
    }
  ]
}
{% endschema %}
